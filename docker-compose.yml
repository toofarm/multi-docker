# This will probably fail the first time you run it! This is ok. It's looking for packages that don't exist yet. Close it, then try it again

# NOTE: If you don't specify the righthand side of the env variable declarations, it attempts to find those values within your local shell

version: '3' # This is the docker version, not the app version
services:
  nginx:
    restart: always # This has to be running at all times
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports: # Nginx does actually need port mapping, since it's opened to the outside world
      - '3050:80'
    depends_on:
      - api
      - client
  postgres:
    image: 'postgres:latest'
    environment:
      - POSTGRES_PASSWORD=postgres_password
  redis:
    image: 'redis:latest'
  api: # We use api instead of 'server' in order to avoid keyword errors in Nginx
    build:
      dockerfile: Dockerfile.dev # No filepath here
      context: ./server # Specify filepath here
    volumes:
      - /app/node_modules # Leave this folder as-is
      - ./server:/app # Reflect changes in the /server directory in /app
    environment: # Where we house our environment vars
      - REDIS_HOST=redis # We can do this b/c it understands this points to the redis service
      - REDIS_PORT=6379 # This is the default port for a redis instance
      - PGUSER=postgres # All these values and Postgres defaults
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
  client:
    stdin_open: true
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
